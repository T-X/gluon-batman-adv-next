From: Linus Lüssing <linus.luessing@c0d3.blue>
Date: Tue, 26 Sep 2023 06:35:08 +0200
Subject: batman-adv: mcast: add option to forward MLD reports only to mcast routers

In most setups it is sufficient for us to only send MLD reports to nodes
which have a multicast router attached. Which reduces overall overhead,
especially in large batman-adv mesh networks, where broadcasts are
particularly undesirable.

However there is one specific, known issue / broken scenario with this
setting:

If the IGMP/MLD querier is configured directly on the bridge on top of
bat0. But there is no multicast router on or behind this node. Then this
bridge will be unable to detect multicast listeners on/behind other
nodes which have the MLD-RTR-ONLY setting enabled. (A workaround for this
can then in turn be to set multicast_router=2 on the bat0 bridge port
on the node with the IGMP/MLD querier.)

Therefore MLD report flooding is kept the default and MLD report to
multicast routers only forwarding is considered experimental and
warned about.

Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>

--- a/include/uapi/linux/batman_adv.h
+++ b/include/uapi/linux/batman_adv.h
@@ -481,6 +481,15 @@ enum batadv_nl_attrs {
 	 */
 	BATADV_ATTR_MULTICAST_FANOUT,
 
+	/**
+	 * @BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED: defines how IGMP/MLD
+	 * reports are forwarded in the mesh. If set to non-zero then IGMP/MLD
+	 * reports are only forwarded to detected multicast routers. If set to
+	 * zero then they are flooded instead.
+	 * Warning: The former is experimental and potentially unsafe!
+	 */
+	BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED,
+
 	/* add attributes above here, update the policy in netlink.c */
 
 	/**
--- a/net/batman-adv/multicast.c
+++ b/net/batman-adv/multicast.c
@@ -1015,8 +1015,14 @@ static int batadv_mcast_forw_mode_check_
 	if (!pskb_may_pull(skb, sizeof(struct ethhdr) + sizeof(*iphdr)))
 		return -ENOMEM;
 
-	if (batadv_mcast_is_report_ipv4(skb))
+	if (batadv_mcast_is_report_ipv4(skb)) {
+		if (atomic_read(&bat_priv->multicast_mld_rtr_only)) {
+			*is_routable = IGMP_HOST_MEMBERSHIP_REPORT;
+			return 0;
+		}
+
 		return -EINVAL;
+	}
 
 	iphdr = ip_hdr(skb);
 
@@ -1079,8 +1085,14 @@ static int batadv_mcast_forw_mode_check_
 	if (!pskb_may_pull(skb, sizeof(struct ethhdr) + sizeof(*ip6hdr)))
 		return -ENOMEM;
 
-	if (batadv_mcast_is_report_ipv6(skb))
+	if (batadv_mcast_is_report_ipv6(skb)) {
+		if (atomic_read(&bat_priv->multicast_mld_rtr_only)) {
+			*is_routable = ICMPV6_MGM_REPORT;
+			return 0;
+		}
+
 		return -EINVAL;
+	}
 
 	ip6hdr = ipv6_hdr(skb);
 
@@ -1167,17 +1179,19 @@ static int batadv_mcast_forw_want_all_ip
  * @protocol: the ethernet protocol type to count multicast routers for
  *
  * Return: the number of nodes which want all routable IPv4 multicast traffic
- * if the protocol is ETH_P_IP or the number of nodes which want all routable
- * IPv6 traffic if the protocol is ETH_P_IPV6. Otherwise returns 0.
+ * if the protocol is ETH_P_IP or IGMP_HOST_MEMBERSHIP_REPORT. Or the number of
+ * nodes which want all routable IPv6 traffic if the protocol is ETH_P_IPV6 or
+ * ICMPV6_MGM_REPORT. Otherwise returns 0.
  */
-
 static int batadv_mcast_forw_rtr_count(struct batadv_priv *bat_priv,
 				       int protocol)
 {
 	switch (protocol) {
 	case ETH_P_IP:
+	case IGMP_HOST_MEMBERSHIP_REPORT:
 		return atomic_read(&bat_priv->mcast.num_want_all_rtr4);
 	case ETH_P_IPV6:
+	case ICMPV6_MGM_REPORT:
 		return atomic_read(&bat_priv->mcast.num_want_all_rtr6);
 	default:
 		return 0;
@@ -1241,10 +1255,11 @@ enum batadv_forw_mode
 batadv_mcast_forw_mode(struct batadv_priv *bat_priv, struct sk_buff *skb,
 		       unsigned short vid, int *is_routable)
 {
-	int ret, tt_count, ip_count, unsnoop_count, total_count;
+	atomic_t *unsnoop_cnt_atom = &bat_priv->mcast.num_want_all_unsnoopables;
+	int ret, ip_count, rtr_count, total_count;
+	int tt_count = 0, unsnoop_count = 0;
 	bool is_unsnoopable = false;
 	struct ethhdr *ethhdr;
-	int rtr_count = 0;
 
 	ret = batadv_mcast_forw_mode_check(bat_priv, skb, &is_unsnoopable,
 					   is_routable);
@@ -1255,11 +1270,17 @@ batadv_mcast_forw_mode(struct batadv_pri
 
 	ethhdr = eth_hdr(skb);
 
-	tt_count = batadv_tt_global_hash_count(bat_priv, ethhdr->h_dest,
-					       BATADV_NO_FLAGS);
-	ip_count = batadv_mcast_forw_want_all_ip_count(bat_priv, ethhdr);
-	unsnoop_count = !is_unsnoopable ? 0 :
-			atomic_read(&bat_priv->mcast.num_want_all_unsnoopables);
+	if (*is_routable != IGMP_HOST_MEMBERSHIP_REPORT &&
+	    *is_routable != ICMPV6_MGM_REPORT) {
+		tt_count = batadv_tt_global_hash_count(bat_priv, ethhdr->h_dest,
+						       BATADV_NO_FLAGS);
+
+		if (is_unsnoopable)
+			unsnoop_count = atomic_read(unsnoop_cnt_atom);
+	}
+
+	ip_count = batadv_mcast_forw_want_all_ip_count(bat_priv,
+						       ethhdr);
 	rtr_count = batadv_mcast_forw_rtr_count(bat_priv, *is_routable);
 
 	total_count = tt_count + ip_count + unsnoop_count + rtr_count;
@@ -1547,8 +1568,10 @@ batadv_mcast_forw_want_rtr(struct batadv
 {
 	switch (ntohs(eth_hdr(skb)->h_proto)) {
 	case ETH_P_IP:
+	case IGMP_HOST_MEMBERSHIP_REPORT:
 		return batadv_mcast_forw_want_all_rtr4(bat_priv, skb, vid);
 	case ETH_P_IPV6:
+	case ICMPV6_MGM_REPORT:
 		return batadv_mcast_forw_want_all_rtr6(bat_priv, skb, vid);
 	default:
 		/* we shouldn't be here... */
@@ -1578,12 +1601,17 @@ int batadv_mcast_forw_send(struct batadv
 {
 	int ret;
 
+	if (is_routable == IGMP_HOST_MEMBERSHIP_REPORT ||
+	    is_routable == ICMPV6_MGM_REPORT)
+		goto skip_mc_listeners;
+
 	ret = batadv_mcast_forw_tt(bat_priv, skb, vid);
 	if (ret != NET_XMIT_SUCCESS) {
 		kfree_skb(skb);
 		return ret;
 	}
 
+skip_mc_listeners:
 	ret = batadv_mcast_forw_want_all(bat_priv, skb, vid);
 	if (ret != NET_XMIT_SUCCESS) {
 		kfree_skb(skb);
--- a/net/batman-adv/multicast_forw.c
+++ b/net/batman-adv/multicast_forw.c
@@ -14,8 +14,10 @@
 #include <linux/errno.h>
 #include <linux/etherdevice.h>
 #include <linux/gfp.h>
+#include <linux/icmpv6.h>
 #include <linux/if_ether.h>
 #include <linux/if_vlan.h>
+#include <linux/igmp.h>
 #include <linux/ipv6.h>
 #include <linux/limits.h>
 #include <linux/netdevice.h>
@@ -498,7 +500,9 @@ batadv_mcast_forw_push_dests(struct bata
 	if (!batadv_mcast_forw_push_est_padding(skb, *count, tvlv_len))
 		goto err;
 
-	if (!batadv_mcast_forw_push_tt(bat_priv, skb, vid, &num_dests,
+	if (is_routable != IGMP_HOST_MEMBERSHIP_REPORT &&
+	    is_routable != ICMPV6_MGM_REPORT &&
+	    !batadv_mcast_forw_push_tt(bat_priv, skb, vid, &num_dests,
 				       tvlv_len))
 		goto err;
 
--- a/net/batman-adv/netlink.c
+++ b/net/batman-adv/netlink.c
@@ -149,6 +149,7 @@ static const struct nla_policy batadv_ne
 	[BATADV_ATTR_LOG_LEVEL]			= { .type = NLA_U32 },
 	[BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED]	= { .type = NLA_U8 },
 	[BATADV_ATTR_MULTICAST_FANOUT]		= { .type = NLA_U32 },
+	[BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED]	= { .type = NLA_U8 },
 	[BATADV_ATTR_NETWORK_CODING_ENABLED]	= { .type = NLA_U8 },
 	[BATADV_ATTR_ORIG_INTERVAL]		= { .type = NLA_U32 },
 	[BATADV_ATTR_ELP_INTERVAL]		= { .type = NLA_U32 },
@@ -349,6 +350,10 @@ static int batadv_netlink_mesh_fill(stru
 	if (nla_put_u32(msg, BATADV_ATTR_MULTICAST_FANOUT,
 			atomic_read(&bat_priv->multicast_fanout)))
 		goto nla_put_failure;
+
+	if (nla_put_u8(msg, BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED,
+		       atomic_read(&bat_priv->multicast_mld_rtr_only)))
+		goto nla_put_failure;
 #endif /* CONFIG_BATMAN_ADV_MCAST */
 
 #ifdef CONFIG_BATMAN_ADV_NC
@@ -592,6 +597,18 @@ static int batadv_netlink_set_mesh(struc
 
 		atomic_set(&bat_priv->multicast_fanout, nla_get_u32(attr));
 	}
+
+	if (info->attrs[BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED]) {
+		u8 mld_rtr_only;
+
+		attr = info->attrs[BATADV_ATTR_MULTICAST_MLD_RTR_ONLY_ENABLED];
+		mld_rtr_only = !!nla_get_u8(attr);
+		if (mld_rtr_only)
+			batadv_info(bat_priv->soft_iface,
+				    "Warning: MLD-RTR-ONLY is experimental and has known, broken scenarios\n");
+
+		atomic_set(&bat_priv->multicast_mld_rtr_only, mld_rtr_only);
+	}
 #endif /* CONFIG_BATMAN_ADV_MCAST */
 
 #ifdef CONFIG_BATMAN_ADV_NC
--- a/net/batman-adv/soft-interface.c
+++ b/net/batman-adv/soft-interface.c
@@ -782,6 +782,7 @@ static int batadv_softif_init_late(struc
 #ifdef CONFIG_BATMAN_ADV_MCAST
 	atomic_set(&bat_priv->multicast_mode, 1);
 	atomic_set(&bat_priv->multicast_fanout, 16);
+	atomic_set(&bat_priv->multicast_mld_rtr_only, 0);
 	atomic_set(&bat_priv->mcast.num_want_all_unsnoopables, 0);
 	atomic_set(&bat_priv->mcast.num_want_all_ipv4, 0);
 	atomic_set(&bat_priv->mcast.num_want_all_ipv6, 0);
--- a/net/batman-adv/types.h
+++ b/net/batman-adv/types.h
@@ -1683,6 +1683,13 @@ struct batadv_priv {
 	 *  multicast-to-unicast conversion
 	 */
 	atomic_t multicast_fanout;
+
+	/**
+	 * @multicast_mld_rtr_only: bool indicating whether to send IGMP/MLD
+	 *  reports only to multicast routers or to flood them otherwise.
+	 * Warning: The former is experimental and potentially unsafe!
+	 */
+	atomic_t multicast_mld_rtr_only;
 #endif
 
 	/** @orig_interval: OGM broadcast interval in milliseconds */
